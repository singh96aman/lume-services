version: "3.7"
services:
  # MySQL
  mysql:
    image: mysql/mysql-server:8.0
    ports:
        - ${LUME_MODEL_DB__PORT:-3306}:3306
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - service-net
    volumes:
      - type: bind
        source: ./model-db-init.sql
        target: /docker-entrypoint-initdb.d/model-db-init.sql
        read_only: true
    environment:
      MYSQL_ROOT_PASSWORD: ${LUME_MODEL_DB__PASSWORD:-password}
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_USER: ${LUME_MODEL_DB__USER:-root}
      MYSQL_DATABASE: ${LUME_MODEL_DB__DATABASE:-lume_services_models}

  # Mongodb
  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${LUME_RESULTS_DB__USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${LUME_RESULTS_DB__PASSWORD:-password}
    ports:
      - ${LUME_RESULTS_DB__PORT:-27017}:27017
    networks:
      - service-net

  # PostgreSQL: the backing database which stores flow metadata
  postgres:
    image: "postgres:11"
    environment:
      POSTGRES_USER: prefect_user
      POSTGRES_PASSWORD: prefect_password
      POSTGRES_DB: prefect_db
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - prefect-server
    command:
      - "postgres"
      # explicitly set max connections
      - "-c"
      - "max_connections=150"
    healthcheck:
      test: pg_isready -q -d $${POSTGRES_DB:-prefect_db} -U $${POSTGRES_USER:-prefect_user} || exit 1
      interval: 10s
      timeout: 2s
      retries: 60
      start_period: 2s
    restart: always

  # Hasura: automatically generates a GraphQL schema from Postgres, provides most of the 'query' API
  hasura:
    image: "hasura/graphql-engine:v2.1.1"
    init: true
    command: "graphql-engine serve"
    environment:
      # url assembled from postres env vars above
      HASURA_GRAPHQL_DATABASE_URL: postgresql://prefect_user:prefect_password@postgres:5432/prefect_db
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_SERVER_PORT: "3000"
      HASURA_GRAPHQL_QUERY_PLAN_CACHE_SIZE: 100
      HASURA_GRAPHQL_LOG_LEVEL: "warn"
      HASURA_GRAPHQL_V1_BOOLEAN_NULL_COLLAPSE: "true"
    networks:
      - prefect-server
    healthcheck:
      test: wget -O - http://hasura:$${HASURA_GRAPHQL_SERVER_PORT}/healthz &>/dev/null || exit 1
      interval: 10s
      timeout: 2s
      retries: 60
      start_period: 1s
    restart: always
    depends_on:
      - postgres

  # GraphQL: provides most of the 'mutation' GraphQL API
  graphql:
    image: "prefecthq/server:${LUME_PREFECT__SERVER__TAG:-latest}"
    command: bash -c "prefect-server database upgrade -y && python src/prefect_server/services/graphql/server.py"
    environment:
      PREFECT_SERVER_DB_CMD: prefect-server database upgrade -y
      # use postgres configured above
      PREFECT_SERVER__DATABASE__CONNECTION_URL: postgresql://prefect_user:prefect_password@postgres:5432/prefect_db
      PREFECT_SERVER__HASURA__ADMIN_SECRET: ${PREFECT_SERVER__HASURA__ADMIN_SECRET:-hasura-secret-admin-secret}
      PREFECT_SERVER__HASURA__HOST: hasura
      PREFECT_CORE_VERSION: ${PREFECT_CORE_VERSION:-"1.2.4"}
    networks:
      - prefect-server
    healthcheck:
      test: curl --fail --silent "http://graphql:4201/health" &> /dev/null || exit 1
      interval: 20s
      timeout: 2s
      retries: 60
      start_period: 1s
    restart: always
    depends_on:
      - hasura

  # Towel: runs a collection of simple services
  towel:
    image: "prefecthq/server:${LUME_PREFECT__SERVER__TAG:-latest}"
    command: "python src/prefect_server/services/towel/__main__.py"
    environment:
      PREFECT_SERVER__HASURA__ADMIN_SECRET: ${PREFECT_SERVER__HASURA__ADMIN_SECRET:-hasura-secret-admin-secret}
      PREFECT_SERVER__HASURA__HOST: hasura
    networks:
      - prefect-server
    restart: "always"
    depends_on:
      - graphql

  # Apollo: combines the hasura and graphql schemas into a unified schema, the primary API entrypoint
  apollo:
    image: "prefecthq/apollo:${LUME_PREFECT__SERVER__TAG:-latest}"
    ports:
      - "${LUME_PREFECT__SERVER__HOST_PORT:-4200}:4200"
    command: bash -c "./post-start.sh && npm run serve"
    environment:
      HASURA_API_URL: ${HASURA_API_URL:-http://hasura:3000/v1alpha1/graphql}
      PREFECT_API_URL: ${PREFECT_API_URL:-http://graphql:4201/graphql/}
      PREFECT_API_HEALTH_URL: ${PREFECT_API_HEALTH_URL:-http://graphql:4201/health}
      PREFECT_SERVER__TELEMETRY__ENABLED: ${PREFECT_SERVER__TELEMETRY__ENABLED:-true}
      GRAPHQL_SERVICE_HOST: http://graphql
      GRAPHQL_SERVICE_PORT: 4201
    networks:
      - prefect-server
      - service-net
    healthcheck:
      test: curl --fail --silent "http://apollo:4200/.well-known/apollo/server-health" &> /dev/null || exit 1
      interval: 10s
      timeout: 2s
      retries: 60
      start_period: 1s
    restart: always
    depends_on:
      - graphql
      - hasura

  # agent
  agent:
    image: prefecthq/prefect:1.4.0-python3.10
    # The environment variables are passed from agent to job pods
    # This configures access to services
    command: >
      bash -c "prefect server create-tenant --name default --slug default &>/dev/null ;
      [[ -n \"${STANFORD_USERNAME}\" && -n \"${SCR_PAT}\" ]] && docker login -u ${STANFORD_USERNAME} -p ${SCR_PAT} http://scr.svc.stanford.edu;
      prefect agent docker start --label lume-services --agent-address http://localhost:5000/ --show-flow-logs --log-level DEBUG --network service-net --env LUME_BACKEND=$LUME_BACKEND
      --env LUME_MOUNTED_FILESYSTEM__IDENTIFIER=${LUME_MOUNTED_FILESYSTEM__IDENTIFIER:-mounted}
      --env LUME_MOUNTED_FILESYSTEM__MOUNT_PATH=${LUME_MOUNTED_FILESYSTEM__MOUNT_PATH}
      --env LUME_MOUNTED_FILESYSTEM__MOUNT_ALIAS=${LUME_MOUNTED_FILESYSTEM__MOUNT_ALIAS:-/lume-services/data}
      --env LUME_MOUNTED_FILESYSTEM__MOUNT_TYPE=${LUME_MOUNTED_FILESYSTEM__MOUNT_TYPE:-DirectoryOrCreate}
      --env LUME_MODEL_DB__HOST=mysql
      --env LUME_MODEL_DB__PORT=3306
      --env LUME_MODEL_DB__USER=${LUME_MODEL_DB__USER:-root}
      --env LUME_MODEL_DB__PASSWORD=${LUME_MODEL_DB__PASSWORD:-password}
      --env LUME_MODEL_DB__DATABASE=${LUME_MODEL_DB__DATABASE:-lume_services_models}
      --env LUME_RESULTS_DB__USERNAME=${LUME_RESULTS_DB__USERNAME:-root}
      --env LUME_RESULTS_DB__PASSWORD=${LUME_RESULTS_DB__PASSWORD:-password}
      --env LUME_RESULTS_DB__PORT=27017
      --env LUME_RESULTS_DB__HOST=mongodb
      --env LUME_RESULTS_DB__DATABASE=${LUME_RESULTS_DB__DATABASE:-lume_services_results}
      --env LUME_PREFECT__SERVER__HOST=http://apollo
      --env LUME_PREFECT__SERVER__HOST_PORT=4200
      --env LUME_PREFECT__HOME_DIR=~/.prefect
      --env LUME_PREFECT__DEBUG=${LUME_PREFECT__DEBUG:-false}
      --env LUME_PREFECT__BACKEND=server
      --volume ${LUME_MOUNTED_FILESYSTEM__MOUNT_PATH}:${LUME_MOUNTED_FILESYSTEM__MOUNT_ALIAS:-/lume-services/data}"
    volumes:
        - type: bind
          source: ./config.toml
          target: /root/.prefect/config.toml
          read_only: true
        - type: bind
          source: /var/run/docker.sock
          target: /var/run/docker.sock
          read_only: true
        - type: bind
          source: ${LUME_MOUNTED_FILESYSTEM__MOUNT_PATH}
          target: ${LUME_MOUNTED_FILESYSTEM__MOUNT_ALIAS:-/lume-services/data}
          read_only: false
    environment:
      LUME_MOUNTED_FILESYSTEM__IDENTIFIER: ${LUME_MOUNTED_FILESYSTEM__IDENTIFIER:-mounted}
      LUME_MOUNTED_FILESYSTEM__MOUNT_PATH: ${LUME_MOUNTED_FILESYSTEM__MOUNT_PATH}
      LUME_MOUNTED_FILESYSTEM__MOUNT_ALIAS: ${LUME_MOUNTED_FILESYSTEM__MOUNT_ALIAS:-/lume-services/data}
      LUME_MOUNTED_FILESYSTEM__MOUNT_TYPE: ${LUME_MOUNTED_FILESYSTEM__MOUNT_TYPE:-DirectoryOrCreate}
      LUME_MODEL_DB__HOST: mysql
      LUME_MODEL_DB__PORT: 3306
      LUME_MODEL_DB__USER: ${LUME_MODEL_DB__USER:-root}
      LUME_MODEL_DB__PASSWORD: ${LUME_MODEL_DB__PASSWORD:-password}
      LUME_MODEL_DB__DATABASE: ${LUME_MODEL_DB__DATABASE:-lume_services_models}
      LUME_RESULTS_DB__DATABASE: ${LUME_MODEL_DB__DATABASE:-lume_service_results}
      LUME_RESULTS_DB__USERNAME: ${LUME_RESULTS_DB__USERNAME:-root}
      LUME_RESULTS_DB__HOST: mongodb
      LUME_RESULTS_DB__PASSWORD: ${LUME_RESULTS_DB__PASSWORD:-password}
      LUME_RESULTS_DB__PORT: 27017
      LUME_PREFECT__SERVER__HOST: http://apollo
      LUME_PREFECT__SERVER__HOST_PORT: 4200
      LUME_PREFECT__HOME_DIR: ~/.prefect
      LUME_PREFECT__DEBUG: ${LUME_PREFECT__DEBUG:-false}
      LUME_PREFECT__BACKEND: server
    ports:
      - ${LUME_PREFECT__AGENT__HOST_PORT:-5000}:5000
    depends_on:
      - apollo
      - mysql
      - mongodb
    restart: always
    networks:
      - service-net
    healthcheck:
      test: curl --fail --silent "http://agent:5000/api/health" &> /dev/null || exit 1
      interval: 10s
      timeout: 2s
      retries: 60
      start_period: 1s

  ui:
    profiles:
        - with_ui
    command: /intercept.sh
    depends_on:
      apollo:
        condition: service_started
    environment:
      PREFECT_SERVER__APOLLO_URL: http://localhost:${LUME_PREFECT__SERVER__HOST_PORT:-4200}/graphql
    healthcheck:
      interval: 30s
      retries: 3
      test: curl --fail --silent --head "http://ui:8080/" &> /dev/null || exit 1
      timeout: 5s
    image: prefecthq/ui:core-1.2.2
    networks:
      - service-net
    ports:
      - ${LUME_PREFECT__UI__HOST_PORT:-8080}:8080/tcp
    restart: always

volumes:
  postgres:

networks:
  prefect-server:
    name: prefect-server
  service-net:
    name: service-net
 #   driver: bridge
